@model WebDAL.DataModels.Items

@{
    ViewBag.Title = "SellAnItem";
    Layout = "~/Views/Shared/_LayoutClient.cshtml";
}

<div class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.CategoryId, "Category", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.CategoryId, ViewBag.Category as SelectList, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ItemTitle, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ItemTitle, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ItemTitle, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ItemDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div id="toolbar-container"></div>
                    <div id="editor"></div>
                    @Html.EditorFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control hidden" } })
                    @Html.ValidationMessageFor(model => model.ItemDescription, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ItemImage, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ItemImage, new { htmlAttributes = new { @class = "form-control" } })
                    <button type="button" class="btn btn-success pick-img">Select image</button>
                    @Html.ValidationMessageFor(model => model.ItemImage, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BidEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 ">
                    @Html.EditorFor(model => model.BidEndDate, new { htmlAttributes = new { @class = "form-control  , date-picker" } })
                    @Html.ValidationMessageFor(model => model.BidEndDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BidIncrement, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BidIncrement, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BidIncrement, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MinimumBid, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MinimumBid, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MinimumBid, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Sell" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
</div>
@section scripts {
    <!-- jQuery UI CSS Reference -->
    <link href="@Url.Content("~/Content/themes/base/jquery-ui.min.css")" rel="stylesheet" />
    <!-- Required jQuery and jQuery UI Javascript references -->
    <script src="@Url.Content("~/Scripts/jquery-3.4.1.min.js")"></script>
    <script src="@Url.Content("~/Scripts/jquery-ui-1.12.1.min.js")"></script>
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Content/ckeditor5/ckeditor.js"></script>
    <script>
        DecoupledEditor
            .create(document.querySelector('#editor'))
            .then(editor => {
                editor.model.document.on('change:data', () => {
                    $("#ItemDescription").val(editor.getData());
                })
                const toolbarContainer = document.querySelector('#toolbar-container');

                toolbarContainer.appendChild(editor.ui.view.toolbar.element);
            })
            .catch(error => {
                console.error(error);
            });
    </script>
    <script src="~/CKFinderScripts/ckfinder.js"></script>
    <script>
        $(function () {
            $(".pick-img").click(function () {
                CKFinder.modal({
                    chooseFiles: true,
                    width: 800,
                    height: 600,
                    onInit: function (finder) {
                        finder.on('files:choose', function (evt) {
                            var file = evt.data.files.first();
                            var output = document.getElementById("ItemImage");
                            output.value = file.getUrl();
                        });

                        finder.on('file:choose:resizedImage', function (evt) {
                            var output = document.getElementById("ItemImage");
                            output.value = evt.data.resizedUrl;
                        });
                    }
                });
            })
        })
    </script>
    <!-- Code to wire up your DatePicker -->
    <script type="text/javascript">
        $(function () {
            // This will make every element with the class "date-picker" into a DatePicker element
            $('.date-picker').datepicker();
        })
    </script>
}
